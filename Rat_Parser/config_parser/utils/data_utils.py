from .config_parser_exception import ConfigParserException


# Converts a bytes object to an int object using the specified byte order
def bytes_to_int(bytes, order="little"):
    try:
        return int.from_bytes(bytes, byteorder=order)
    except Exception as e:
        raise ConfigParserException(f"Error parsing int from value: {bytes}") from e


# Decodes a bytes object to a Unicode string, using UTF-16LE for byte values
# with null bytes still embedded in them, and UTF-8 for all other values
def decode_bytes(byte_str):
    if isinstance(byte_str, str):
        return byte_str.strip()
    result = None
    try:
        if b"\x00" in byte_str:
            result = byte_str.decode("utf-16le")
        else:
            result = byte_str.decode("utf-8")
    except Exception as e:
        raise ConfigParserException(
            f"Error decoding bytes object to Unicode: {byte_str}"
        ) from e
    return result


def int_to_bytes(int, length=4, order="little"):
    try:
        return int.to_bytes(length, order)
    except Exception as e:
        raise ConfigParserException(f"Error parsing bytes from value: {int}") from e
